(function() {
  document.addEventListener('DOMContentLoaded', function() {
    var benchmarkChartCanvas, chart, createBarChart, ctx, elementCountInput, resultsDiv, runBenchmark, runBenchmarkButton, testRepetitionsInput, testRepetitionsValue;
    elementCountInput = document.getElementById('elementCount');
    runBenchmarkButton = document.getElementById('runBenchmark');
    resultsDiv = document.getElementById('results');
    benchmarkChartCanvas = document.getElementById('benchmarkChart');
    testRepetitionsInput = document.getElementById('testRepetitions');
    testRepetitionsValue = document.getElementById('testRepetitionsValue');
    ctx = benchmarkChartCanvas.getContext('2d');
    chart = null;
    testRepetitionsInput.addEventListener('input', function() {
      return testRepetitionsValue.textContent = testRepetitionsInput.value;
    });
    runBenchmark = function(elementCount) {
      return new Promise(function(resolve) {
        var container, duration, element, endTime, i, j, ref, startTime;
        startTime = performance.now();
        container = document.createElement('div');
        for (i = j = 0, ref = elementCount; (0 <= ref ? j < ref : j > ref); i = 0 <= ref ? ++j : --j) {
          element = document.createElement('div');
          element.textContent = `Element ${i + 1}`;
          container.appendChild(element);
        }
        document.body.appendChild(container);
        endTime = performance.now();
        duration = endTime - startTime;
        document.body.removeChild(container);
        return resolve(duration);
      });
    };
    createBarChart = function(data, labels) {
      var barWidth, chartHeight, chartWidth, maxValue, padding;
      maxValue = Math.max(...data);
      chartHeight = benchmarkChartCanvas.height;
      chartWidth = benchmarkChartCanvas.width;
      barWidth = chartWidth / labels.length;
      padding = 10;
      ctx.clearRect(0, 0, chartWidth, chartHeight);
      return data.forEach(function(value, index) {
        var barHeight, x, y;
        barHeight = (value / maxValue) * (chartHeight - 2 * padding);
        x = index * barWidth;
        y = chartHeight - barHeight - padding;
        ctx.fillStyle = 'rgba(255, 99, 132, 0.2)';
        ctx.fillRect(x, y, barWidth - 5, barHeight);
        ctx.fillStyle = 'rgba(255, 99, 132, 1)';
        ctx.strokeRect(x, y, barWidth - 5, barHeight);
        ctx.fillStyle = 'black';
        ctx.font = '12px sans-serif';
        ctx.textAlign = 'center';
        return ctx.fillText(labels[index], x + barWidth / 2, chartHeight - padding / 2);
      });
    };
    return runBenchmarkButton.addEventListener('click', function() {
      var durations, elementCount, repetitions;
      elementCount = parseInt(elementCountInput.value);
      repetitions = parseInt(testRepetitionsInput.value);
      if (isNaN(elementCount) || elementCount <= 0) {
        resultsDiv.textContent = 'Please enter a valid number of elements.';
        return;
      }
      durations = [];
      return (async function() {        
        // CoffeeScript async pattern
        var averageDuration, duration, i, j, labels, ref;
        for (i = j = 0, ref = repetitions; (0 <= ref ? j < ref : j > ref); i = 0 <= ref ? ++j : --j) {
          duration = (await runBenchmark(elementCount));
          durations.push(duration);
          resultsDiv.textContent = `Run ${i + 1}: ${duration.toFixed(2)} ms`;
          await new Promise(function(resolve) {
            return setTimeout(resolve, 50);
          });
        }
        averageDuration = durations.reduce((function(a, b) {
          return a + b;
        }), 0) / repetitions;
        resultsDiv.textContent = `Average time: ${averageDuration.toFixed(2)} ms`;
        labels = Array.from({
          length: repetitions
        }, function(_, i) {
          return `Run ${i + 1}`;
        });
        labels.push('Average');
        return createBarChart([...durations, averageDuration], labels);
      })();
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=coffeescript